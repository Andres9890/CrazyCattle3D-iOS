name: Build and Release IPA

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release IPA
    runs-on: macos-14
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      - name: Fix Project Format
        run: |
          sed -i '' 's/objectVersion = 77/objectVersion = 56/' xc/CrazyCattle3D.xcodeproj/project.pbxproj
          sed -i '' 's/preferredProjectObjectVersion = 77/preferredProjectObjectVersion = 56/' xc/CrazyCattle3D.xcodeproj/project.pbxproj

      - name: Archive Build (Unsigned)
        run: |
          xcodebuild clean archive \
            -project xc/CrazyCattle3D.xcodeproj \
            -scheme "CrazyCattle3D" \
            -configuration Release \
            -archivePath build/CrazyCattle3D.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            ONLY_ACTIVE_ARCH=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_OPTIMIZATION_LEVEL="-Onone" \
            IPHONEOS_DEPLOYMENT_TARGET=12.0

      - name: Create IPA from Archive
        run: |
          cp -R build/CrazyCattle3D.xcarchive/Products/Applications/CrazyCattle3D.app .
          mkdir -p Payload
          cp -R CrazyCattle3D.app Payload/
          zip -r CrazyCattle3D.ipa Payload
          rm -rf Payload CrazyCattle3D.app

      - name: Next Version
        id: versioning
        run: |
          LATEST_VERSION=$(gh release list --limit 1 | grep -v "No releases" | awk '{print $1}' | sed 's/^v//')
          
          if [ -z "$LATEST_VERSION" ]; then
            NEXT_VERSION="1.0.0"
          else
            MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
            MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
            PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
            
            if [ "$PATCH" -lt 9 ]; then
              PATCH=$((PATCH + 1))
            else
              PATCH=0
              MINOR=$((MINOR + 1))
              if [ "$MINOR" -eq 10 ]; then
                MINOR=0
                MAJOR=$((MAJOR + 1))
              fi
            fi
            
            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "Next version will be: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        run: |
          VERSION="${{ steps.versioning.outputs.version }}"
          RELEASE_NOTES="CrazyCattle3D version $VERSION"
          
          gh release create "v$VERSION" \
            --title "CrazyCattle3D v$VERSION" \
            --notes "$RELEASE_NOTES" \
            --generate-notes \
            "CrazyCattle3D.ipa"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact (for CI)
        uses: actions/upload-artifact@v4
        with:
          name: CrazyCattle3D.ipa
          path: CrazyCattle3D.ipa
          retention-days: 90
